# SPDX-FileCopyrightText: Â© 2024 Tiny Tapeout
# SPDX-License-Identifier: Apache-2.0

import cocotb
from cocotb.clock import Clock
from cocotb.triggers import ClockCycles , RisingEdge

# expected output sequences for each seed over 20 cycles
# EXPECTED_OUTPUTS = {
#     0x01: [
#         0x02, 0x04, 0x09, 0x12, 0x25, 0x4B, 0x96, 0x2D, 0x5A, 0xB4,
#         0x69, 0xD2, 0xA4, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49
#     ],
#     0xA3: [
#         0x46, 0x8C, 0x19, 0x32, 0x64, 0xC9, 0x92, 0x24, 0x49, 0x92,
#         0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24
#     ],
#     0x3F: [
#         0x7F, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE1, 0xC2, 0x85, 0x0B,
#         0x16, 0x2D, 0x5A, 0xB4, 0x69, 0xD2, 0xA4, 0x49, 0x92
#     ],
#     0xFF: [
#         0xFE, 0xFC, 0xF9, 0xF2, 0xE5, 0xCB, 0x96, 0x2D, 0x5A, 0xB4,
#         0x69, 0xD2, 0xA4, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49
#     ],
#     0x7C: [
#         0xF9, 0xF2, 0xE5, 0xCB, 0x96, 0x2D, 0x5A, 0xB4, 0x69, 0xD2,
#         0xA4, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24
#     ],
#    0x12: [
#         0x25, 0x4B, 0x97, 0x2F, 0x5E, 0xBC, 0x78, 0xF0, 0xE1,
#         0xC2, 0x85, 0x0B, 0x16, 0x2D, 0x5A, 0xB4, 0x69, 0xD2, 0xA4, 0x49
#     ],
#     0x55: [
#         0xAB, 0x57, 0xAF, 0x5F, 0xBE, 0x7C, 0xF9, 0xF2, 0xE5,
#         0xCB, 0x96, 0x2D, 0x5A, 0xB4, 0x69, 0xD2, 0xA4, 0x49, 0x92, 0x24
#     ],
 
# }

# Helper function for running an LFSR test with a given seed
async def run_lfsr_test(dut, seed):
    dut._log.info(f"Starting LFSR test with seed = 0x{seed:02X}")
    clock = Clock(dut.clk, 10, units="ns")
    cocotb.start_soon(clock.start())

    # Set seed and reset LFSR
    dut.ui_in.value = seed
    dut.rst_n.value = 0
    await ClockCycles(dut.clk, 5)
    dut.rst_n.value = 1
    await ClockCycles(dut.clk, 1)

   # expected_output = EXPECTED_OUTPUTS[seed]

    # checking output sequence
    for cycle in range(20):
        await RisingEdge(dut.clk)
        actual_value = int(dut.uo_out.value)
       #expected_value = expected_output[cycle]
        dut._log.info(f"Cycle {cycle} w seed 0x{seed:02X}: uo_out = {actual_value:08b} ")
       # assert actual_value == expected_value, f"Mismatch at cycle {cycle} for seed 0x{seed:02X}: got {actual_value:08b}, expected {expected_value:08b}"

    #dut._log.info(f"LFSR test with seed 0x{seed:02X} passed.")

# Individual tests for each seed value
@cocotb.test()
async def test_with_seed_0x01(dut):
    await run_lfsr_test(dut, 0x01)

@cocotb.test()
async def test_with_seed_0xA3(dut):
    await run_lfsr_test(dut, 0xA3)

@cocotb.test()
async def test_with_seed_0x3F(dut):
    await run_lfsr_test(dut, 0x3F)

@cocotb.test()
async def test_with_seed_0xFF(dut):
    await run_lfsr_test(dut, 0xFF)

@cocotb.test()
async def test_with_seed_0x7C(dut):
    await run_lfsr_test(dut, 0x7C)

@cocotb.test()
async def test_with_seed_0x12(dut):
    await run_lfsr_test(dut, 0x12)

@cocotb.test()
async def test_with_seed_0x55(dut):
    await run_lfsr_test(dut, 0x55)

